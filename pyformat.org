* 基本格式
简单的定位格式化可能是最普遍的使用情形。

应该仅在格式化少量元素的时候采用这种简单形式。

*旧格式*
#+BEGIN_SRC ipython :session :results value drawer
'%s %s' % ('one', 'two')
#+END_SRC

*新格式*
#+BEGIN_SRC ipython :session :results value drawer
'{} {}'.format('one', 'two')
#+END_SRC

#+RESULTS:
:RESULTS:
'one two'
:END:

*旧格式*
#+BEGIN_SRC ipython :session :results value drawer
'%d %d' % (1, 2)
#+END_SRC

*新格式*
#+BEGIN_SRC ipython :session :results value drawer
'{} {}'.format(1, 2)
#+END_SRC

#+RESULTS:
:RESULTS:
'1 2'
:END:

使用新格式，可以（Python 2.6中甚至强制）给占位符一个位置索引。

这样可以调整显示的顺序而不必改变参数。

这一操作在旧格式中不可用。

*新格式*
#+BEGIN_SRC ipython :session :results value drawer
'{1} {0}'.format('one', 'two')
#+END_SRC

#+RESULTS:
:RESULTS:
'two one'
:END:
* 值的转换
新样式的格式函数默认调用对象的 ~__format__()~ 方法作为它的表示。如果你只是想得到 ~str(...)~ 或 ~repr(...)~ 的输出，你可以使用 ~!s~ 或 ~!r~ 转换标记。

在 % 型格式化中，你通常使用 ~%s~ 代表字符串，但也可以用 ~%r~ 进行 ~repr(...)~ 转换。

*准备*
#+BEGIN_SRC ipython :session :results none
  class Data(object):
      def __str__(self):
          return 'str'

      def __repr__(self):
          return 'repr'
#+END_SRC

*旧式*
#+BEGIN_SRC ipython :session :results value drawer
'%s %r' % (Data(), Data())
#+END_SRC

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{0!s} {0!r}'.format(Data())
#+END_SRC

#+RESULTS:
:RESULTS:
'str repr'
:END:

在 Python 3 中，存在另一个转换标识，它使用 ~repr(...)~ 的输出，但是用 ~ascii(...)~ 转为 ascii。

*准备*
#+BEGIN_SRC ipython :session :results none
  class Data(object):
      def __repr__(self):
          return 'räpr'
#+END_SRC

*旧式*
#+BEGIN_SRC ipython :session :results value drawer
'%r %a' % (Data(), Data())
#+END_SRC

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{0!r} {0!a}'.format(Data())
#+END_SRC

#+RESULTS:
:RESULTS:
'räpr r\\xe4pr'
:END:
* 字符串的填充及对齐
默认情况下，格式化后刚好占用所需的字符数。但是可以将值填充到指定长度。

不幸的是，新旧型格式化的默认对齐之间存在差异。旧样式默认右对齐，而新样式默认左对齐。

右对齐：

*旧式*
#+BEGIN_SRC ipython :session :results value drawer
'%10s' % ('test',)
#+END_SRC

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{:>10}'.format('test')
#+END_SRC

#+RESULTS:
:RESULTS:
'      test'
:END:

左对齐：

*旧式*
#+BEGIN_SRC ipython :session :results value drawer
'%-10s' % ('test',)
#+END_SRC

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{:10}'.format('test')
#+END_SRC

#+RESULTS:
:RESULTS:
'test      '
:END:

通过提供更多的字符串填充及对齐选项，新式格式化再一次超越了旧式格式化。

你可以选择填充的字符：

在旧式格式化中，这个操作不可用。

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{:_<10}'.format('test')
#+END_SRC

#+RESULTS:
:RESULTS:
'test______'
:END:

还可以让值居中：

此操作在旧式格式化中不可用。

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{:^10}'.format('test')
#+END_SRC

#+RESULTS:
:RESULTS:
'   test   '
:END:

当使用居中对齐时，如果字符串的长度造成填充字符划分不均匀，多出的字符会被放在右侧：

此操作在旧式格式化中不可用。

*新式*
#+BEGIN_SRC ipython :session :results value drawer
'{:^6}'.format('zip')
#+END_SRC

#+RESULTS:
:RESULTS:
' zip  '
:END:

* 截断长字符
填充的逆操作是截断， 可以将过长的字符串截断为指定长度。

在格式中，~.~ 后面的数字指定了输出的精度。对字符串来说，那意味着输出将被截断到指定长度。在我们的例子中这一长度是5个字符。

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%.5s' % ('xylophone',)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:.5}'.format('xylophone')
#+END_SRC

#+RESULTS:
:RESULTS:
'xylop'
:END:

* 截断和填充的结合
还可以将截断和填充相结合：

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%-10.5s' % ('xylophone',)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:10.5}'.format('xylophone')
#+END_SRC

#+RESULTS:
:RESULTS:
'xylop     '
:END:
* 数字
当然，还可以对数字进行格式化。

整型：

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%d' % (42,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:d}'.format(42)
#+END_SRC

#+RESULTS:
:RESULTS:
'42'
:END:

浮点型：

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%f' % (3.141592653589793,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:f}'.format(3.141592653589793)
#+END_SRC

#+RESULTS:
:RESULTS:
'3.141593'
:END:
* 填充数字
和字符串类似，也可以指定数字的长度

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%4d' % (42,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:4d}'.format(42)
#+END_SRC

#+RESULTS:
:RESULTS:
'  42'
:END:

并且和字符串的截断相似，浮点数字的精度限制了小数点后数字的位数。

对于浮点数，填充值代表了最终结果的长度。在下面的例子当中我们想要输出的结果至少有6位字符，其中小数点后有两位。

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%06.2f' % (3.141592653589793,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:06.2f}'.format(3.141592653589793)
#+END_SRC

#+RESULTS:
:RESULTS:
'003.14'
:END:

对整型数来讲，提供精度并没有什么意义，而且实际上新的格式化方法中也禁止这样做（会导致 ValueError）,

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%04d' % (42,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:04d}'.format(42)
#+END_SRC
* 带符号的数字
默认情况下只有负数有符号前缀。当然，这可以改变。

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%+d' % (42,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:+d}'.format(42)
#+END_SRC

#+RESULTS:
:RESULTS:
'+42'
:END:

使用空白字符以说明负数前面应该有一个负号，而正数前面应该留有一个空格。

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'% d' % ((- 23),)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{: d}'.format((- 23))
#+END_SRC

#+RESULTS:
:RESULTS:
'-23'
:END:

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'% d' % (42,)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{: d}'.format(42)
#+END_SRC

#+RESULTS:
:RESULTS:
' 42'
:END:

新型格式化还可以控制符号相对于填充的位置。

这一操作不适用于旧式格式化。

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:=5d}'.format((- 23))
#+END_SRC

#+RESULTS:
:RESULTS:
'-  23'
:END:

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:=+5d}'.format(23)
#+END_SRC

#+RESULTS:
:RESULTS:
'+  23'
:END:
* 命名占位符
两种格式化风格都支持命名占位符。

*准备*
#+BEGIN_SRC ipython :session :results none
data = {'first': 'Hodor', 'last': 'Hodor!'}
#+END_SRC

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%(first)s %(last)s' % data
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{first} {last}'.format(**data)
#+END_SRC

#+RESULTS:
:RESULTS:
'Hodor Hodor!'
:END:

~.format()~ 还接受关键词参数。

这不适用于旧式格式化。

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{first} {last}'.format(first='Hodor', last='Hodor!')
#+END_SRC

#+RESULTS:
:RESULTS:
'Hodor Hodor!'
:END:
* Getitem 和 Getattr
新式格式化在访问嵌套数据结构时具有更大的灵活性。

它支持访问支持 ~__getitem__~ 的容器，例如 dictionary 类型或 list 类型：

这项操作不适用于旧式格式化。

*准备*
#+BEGIN_SRC ipython :session :results none
person = {'first': 'Jean-Luc', 'last': 'Picard'}
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{p[first]} {p[last]}'.format(p=person)
#+END_SRC

#+RESULTS:
:RESULTS:
'Jean-Luc Picard'
:END:

*准备*
#+BEGIN_SRC ipython :session :results none
data = [4, 8, 15, 16, 23, 42]
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{d[4]} {d[5]}'.format(d=data)
#+END_SRC

#+RESULTS:
:RESULTS:
'23 42'
:END:

还可以通过 ~getattr()~ 获得对象的属性：

这项操作不适用于旧式格式化。

*准备*
#+BEGIN_SRC ipython :session :results none
  class Plant(object):
      type = 'tree'
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{p.type}'.format(p=Plant())
#+END_SRC

#+RESULTS:
:RESULTS:
'tree'
:END:

这两种类型的访问可以任意混合和嵌套：

下列操作不适用于旧式格式化。

*准备*
#+BEGIN_SRC ipython :session :results none
  class Plant(object):
      type = 'tree'
      kinds = [{'name': 'oak'}, {'name': 'maple'}]
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{p.type}: {p.kinds[0][name]}'.format(p=Plant())
#+END_SRC

#+RESULTS:
:RESULTS:
'tree: oak'
:END:
* 日期时间
新式格式化还允许对象控制它们自己的渲染。这使得比如 datetime 对象可以被行内格式化：

以下操作不适用于旧式格式化。

*准备*
#+BEGIN_SRC ipython :session :results none
from datetime import datetime
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:%Y-%m-%d %H:%M}'.format(datetime(2001, 2, 3, 4, 5))
#+END_SRC

#+RESULTS:
:RESULTS:
'2001-02-03 04:05'
:END:

* 参量化格式

另外，新式格式化允许格式的所有组成部分用参量化动态指定。参量化格式是用花括号括住的嵌套表达式，可以出现在父格式冒号后的任意位置。

旧式格式化也支持一些参量化，但是要有限得多。即它只允许输出结果的长度和精度的参量化。

参量化对齐以及长度：

以下操作不适用于旧式格式化。

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:{align}{width}}'.format('test', align='^', width='10')
#+END_SRC

#+RESULTS:
:RESULTS:
'   test   '
:END:

参量化精度：

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%.*s = %.*f' % (3, 'Gibberish', 3, 2.7182)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:.{prec}} = {:.{prec}f}'.format('Gibberish', 2.7182, prec=3)
#+END_SRC

#+RESULTS:
:RESULTS:
'Gib = 2.718'
:END:

长度和精度：

*旧*
#+BEGIN_SRC ipython :session :results value drawer
'%*.*f' % (5, 2, 2.7182)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:{width}.{prec}f}'.format(2.7182, width=5, prec=2)
#+END_SRC

#+RESULTS:
:RESULTS:
' 2.72'
:END:

嵌套格式可以用于指定格式的/任意/部分， 所以上面的关于精度的例子可以重新写为：

下面操作不适用于旧式格式。

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:{prec}} = {:{prec}}'.format('Gibberish', 2.7182, prec='.3')
#+END_SRC

#+RESULTS:
:RESULTS:
'Gib = 2.72'
:END:

日期时间的各组成部分可以分别设置：

下面操作不适用于旧式格式。

*准备*
#+BEGIN_SRC ipython :session :results none
  from datetime import datetime
  dt = datetime(2001, 2, 3, 4, 5)
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:{dfmt} {tfmt}}'.format(dt, dfmt='%Y-%m-%d', tfmt='%H:%M')
#+END_SRC

#+RESULTS:
:RESULTS:
'2001-02-03 04:05'
:END:

嵌套格式可以是位置参数。位置取决于开放的花括号的顺序：

下面操作不适用于旧式格式。

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:{}{}{}.{}}'.format(2.7182818284, '>', '+', 10, 3)
#+END_SRC

#+RESULTS:
:RESULTS:
'     +2.72'
:END:

* 自定义对象

时间日期的例子用到了魔性的方法 ~__format__()~。你可以在你的对象内通过重载这一方法来定义个性化格式处理。这使你可以完全控制所用到的格式语法。

下面操作不适用于旧式格式。

*准备*
#+BEGIN_SRC ipython :session :results none
  class HAL9000(object):

      def __format__(self, format):
          if (format == 'open-the-pod-bay-doors'):
              return "I'm afraid I can't do that."
          return 'HAL 9000'
#+END_SRC

*新*
#+BEGIN_SRC ipython :session :results value drawer
'{:open-the-pod-bay-doors}'.format(HAL9000())
#+END_SRC

#+RESULTS:
:RESULTS:
"I'm afraid I can't do that."
:END:

